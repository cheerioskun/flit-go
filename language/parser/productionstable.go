// Code generated by gocc; DO NOT EDIT.

package parser

import(
    "strconv"
    "fmt"
    "github.com/cheerioskun/flit-go/models"
    "github.com/cheerioskun/flit-go/utils"
    "github.com/cheerioskun/flit-go/language/util"
    "github.com/cheerioskun/flit-go/language/token"
)

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Log	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Log : EntryList	<< models.NewFitnessLog(X[0].([]*models.Workout)), nil >>`,
		Id:         "Log",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.NewFitnessLog(X[0].([]*models.Workout)), nil
		},
	},
	ProdTabEntry{
		String: `Int : int	<< util.IntValue(X[0].(*token.Token).Lit) >>`,
		Id:         "Int",
		NTType:     2,
		Index:      2,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return util.IntValue(X[0].(*token.Token).Lit)
		},
	},
	ProdTabEntry{
		String: `String : string	<< string(X[0].(*token.Token).Lit), nil >>`,
		Id:         "String",
		NTType:     3,
		Index:      3,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `Date : date	<< string(X[0].(*token.Token).Lit), nil >>`,
		Id:         "Date",
		NTType:     4,
		Index:      4,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return string(X[0].(*token.Token).Lit), nil
		},
	},
	ProdTabEntry{
		String: `Reps : Int	<< models.RepsPair{X[0].(int64), X[0].(int64)}, nil >>`,
		Id:         "Reps",
		NTType:     5,
		Index:      5,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.RepsPair{X[0].(int64), X[0].(int64)}, nil
		},
	},
	ProdTabEntry{
		String: `Reps : "[" Int Int "]"	<< models.RepsPair{X[1].(int64), X[2].(int64)}, nil >>`,
		Id:         "Reps",
		NTType:     5,
		Index:      6,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.RepsPair{X[1].(int64), X[2].(int64)}, nil
		},
	},
	ProdTabEntry{
		String: `SignedFloat : "+" SignedFloat	<< X[1].(float64), nil >>`,
		Id:         "SignedFloat",
		NTType:     6,
		Index:      7,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(float64), nil
		},
	},
	ProdTabEntry{
		String: `SignedFloat : "-" SignedFloat	<< -1 * X[1].(float64), nil >>`,
		Id:         "SignedFloat",
		NTType:     6,
		Index:      8,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return -1 * X[1].(float64), nil
		},
	},
	ProdTabEntry{
		String: `SignedFloat : float	<< strconv.ParseFloat(string(X[0].(*token.Token).Lit), 32) >>`,
		Id:         "SignedFloat",
		NTType:     6,
		Index:      9,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return strconv.ParseFloat(string(X[0].(*token.Token).Lit), 32)
		},
	},
	ProdTabEntry{
		String: `SignedFloat : Int	<< float64(X[0].(int64)), nil >>`,
		Id:         "SignedFloat",
		NTType:     6,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return float64(X[0].(int64)), nil
		},
	},
	ProdTabEntry{
		String: `Weights : "(" SignedFloat ")"	<< models.WeightPair{X[1].(float64), X[1].(float64)}, nil >>`,
		Id:         "Weights",
		NTType:     7,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.WeightPair{X[1].(float64), X[1].(float64)}, nil
		},
	},
	ProdTabEntry{
		String: `Weights : "([" SignedFloat SignedFloat "])"	<< models.WeightPair{X[1].(float64), X[2].(float64)}, nil >>`,
		Id:         "Weights",
		NTType:     7,
		Index:      12,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.WeightPair{X[1].(float64), X[2].(float64)}, nil
		},
	},
	ProdTabEntry{
		String: `Weights : empty	<< nil, nil >>`,
		Id:         "Weights",
		NTType:     7,
		Index:      13,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Comment : "[" String "]"	<< X[1].(string), nil >>`,
		Id:         "Comment",
		NTType:     8,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(string), nil
		},
	},
	ProdTabEntry{
		String: `Comment : empty	<< "", nil >>`,
		Id:         "Comment",
		NTType:     8,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return "", nil
		},
	},
	ProdTabEntry{
		String: `Set : Reps Weights Comment	<< models.NewSet(X[0].(models.RepsPair), X[1], X[2].(string)) >>`,
		Id:         "Set",
		NTType:     9,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.NewSet(X[0].(models.RepsPair), X[1], X[2].(string))
		},
	},
	ProdTabEntry{
		String: `SetList : Set	<< []models.Set{X[0].(models.Set)}, nil >>`,
		Id:         "SetList",
		NTType:     10,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []models.Set{X[0].(models.Set)}, nil
		},
	},
	ProdTabEntry{
		String: `SetList : SetList "+" Set	<< append(X[0].([]models.Set), X[2].(models.Set)), nil >>`,
		Id:         "SetList",
		NTType:     10,
		Index:      18,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append(X[0].([]models.Set), X[2].(models.Set)), nil
		},
	},
	ProdTabEntry{
		String: `Setting : String ":" String	<< utils.Tuple{X[0].(string), X[2].(string)}, nil >>`,
		Id:         "Setting",
		NTType:     11,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return utils.Tuple{X[0].(string), X[2].(string)}, nil
		},
	},
	ProdTabEntry{
		String: `Setting : String ":" SignedFloat	<< utils.Tuple{X[0].(string), fmt.Sprintf("%f", X[2].(float64))}, nil >>`,
		Id:         "Setting",
		NTType:     11,
		Index:      20,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return utils.Tuple{X[0].(string), fmt.Sprintf("%f", X[2].(float64))}, nil
		},
	},
	ProdTabEntry{
		String: `Setting : String	<< utils.Tuple{X[0].(string), "True"}, nil >>`,
		Id:         "Setting",
		NTType:     11,
		Index:      21,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return utils.Tuple{X[0].(string), "True"}, nil
		},
	},
	ProdTabEntry{
		String: `Settings : Setting	<< utils.MapFromTuples([]utils.Tuple{X[0].(utils.Tuple)}), nil >>`,
		Id:         "Settings",
		NTType:     12,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return utils.MapFromTuples([]utils.Tuple{X[0].(utils.Tuple)}), nil
		},
	},
	ProdTabEntry{
		String: `Settings : Settings "," Setting	<< utils.MapFromTuples(append(X[0].([]utils.Tuple), X[2].(utils.Tuple))), nil >>`,
		Id:         "Settings",
		NTType:     12,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return utils.MapFromTuples(append(X[0].([]utils.Tuple), X[2].(utils.Tuple))), nil
		},
	},
	ProdTabEntry{
		String: `Settings : "(" Settings ")"	<< X[1].(map[string]string), nil >>`,
		Id:         "Settings",
		NTType:     12,
		Index:      24,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[1].(map[string]string), nil
		},
	},
	ProdTabEntry{
		String: `Settings : empty	<< nil, nil >>`,
		Id:         "Settings",
		NTType:     12,
		Index:      25,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Exercise : list_num String Settings "=" SetList	<< models.NewExercise(X[1].(string), X[4].([]models.Set), X[2]) >>`,
		Id:         "Exercise",
		NTType:     13,
		Index:      26,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.NewExercise(X[1].(string), X[4].([]models.Set), X[2])
		},
	},
	ProdTabEntry{
		String: `Exercises : Exercise	<< []models.Exercise{X[0].(models.Exercise)}, nil >>`,
		Id:         "Exercises",
		NTType:     14,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []models.Exercise{X[0].(models.Exercise)}, nil
		},
	},
	ProdTabEntry{
		String: `Exercises : Exercises Exercise	<< append(X[0].([]models.Exercise), X[1].(models.Exercise)), nil >>`,
		Id:         "Exercises",
		NTType:     14,
		Index:      28,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append(X[0].([]models.Exercise), X[1].(models.Exercise)), nil
		},
	},
	ProdTabEntry{
		String: `Entry : Date Exercises	<< models.NewWorkout(X[0].(string), X[1].([]models.Exercise)) >>`,
		Id:         "Entry",
		NTType:     15,
		Index:      29,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return models.NewWorkout(X[0].(string), X[1].([]models.Exercise))
		},
	},
	ProdTabEntry{
		String: `EntryList : Entry	<< []*models.Workout{X[0].(*models.Workout)}, nil >>`,
		Id:         "EntryList",
		NTType:     16,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []*models.Workout{X[0].(*models.Workout)}, nil
		},
	},
	ProdTabEntry{
		String: `EntryList : EntryList Entry	<< append(X[0].([]*models.Workout), X[1].(*models.Workout)), nil >>`,
		Id:         "EntryList",
		NTType:     16,
		Index:      31,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return append(X[0].([]*models.Workout), X[1].(*models.Workout)), nil
		},
	},
}
