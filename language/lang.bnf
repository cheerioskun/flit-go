/* Lexical Part */

!whitespace: ' ' | '\t' | '\n' | '\r';
_digit: '0' - '9';
_int: _digit {_digit};
int: _int;
_float: _digit {_digit} [('.' _digit {_digit})] ;
float: _float;
_chars: (('a' - 'z') | ('A' - 'Z'));
_string: _chars  {(_chars | ' ' | _digit)};
string: _string;

// Date in YYYY-MM-DD   
date: (_digit _digit _digit _digit) '-' (_digit _digit) '-' (_digit _digit);


// Custom types

list_num: _digit '.' ' ';


/* Syntax Part */

<<
import(
    "strconv"
    "fmt"
    "github.com/cheerioskun/flit-go/models"
    "github.com/cheerioskun/flit-go/utils"
    "github.com/cheerioskun/flit-go/language/util"
    "github.com/cheerioskun/flit-go/language/token"
)

>>

Log
    : EntryList << models.NewFitnessLog($0.([]*models.Workout)), nil >>
    ;

Int:
    int << util.IntValue($0.(*token.Token).Lit) >>
    ;

String:
    string << string($0.(*token.Token).Lit), nil >>
    ;

Date:
    date << string($0.(*token.Token).Lit), nil >>
    ;

Reps: 
    Int << models.RepsPair{$0.(int64), $0.(int64)}, nil >>
    | "[" Int Int "]" << models.RepsPair{$1.(int64), $2.(int64)}, nil >> 
    ;

SignedFloat:
    "+" SignedFloat << $1.(float64), nil >>
    | "-" SignedFloat << -1 * $1.(float64), nil >>
    | float << strconv.ParseFloat(string($0.(*token.Token).Lit), 32) >>
    | Int << float64($0.(int64)), nil >>
    ;

Weights: 
    "(" SignedFloat ")" << models.WeightPair{$1.(float64), $1.(float64)}, nil >>
    |  "([" SignedFloat SignedFloat "])" << models.WeightPair{$1.(float64), $2.(float64)}, nil >>
    | empty << nil, nil >>
    ;
Comment:
    "[" String "]" << $1.(string), nil >>
    | empty << "", nil >>
    ;

Set: 
    Reps Weights Comment << models.NewSet($0.(models.RepsPair), $1, $2.(string)) >>
    ;

SetList:
    Set << []models.Set{$0.(models.Set)}, nil >>
    | SetList "+" Set << append($0.([]models.Set), $2.(models.Set)), nil>>
    ;

Setting:
    String ":" String << utils.Tuple{$0.(string), $2.(string)}, nil >>
    | String ":" SignedFloat << utils.Tuple{$0.(string), fmt.Sprintf("%f", $2.(float64))}, nil >>
    | String << utils.Tuple{$0.(string), "True"}, nil >>
    ;

Settings:
    Setting << utils.MapFromTuples([]utils.Tuple{$0.(utils.Tuple)}), nil >>
    | Settings "," Setting << utils.MapFromTuples(append($0.([]utils.Tuple), $2.(utils.Tuple))), nil >>
    | "(" Settings ")" << $1.(map[string]string), nil >>
    | empty << nil, nil >>
    ;

Exercise:
    list_num String Settings "=" SetList << models.NewExercise($1.(string), $4.([]models.Set), $2) >>
    ;

Exercises:
    Exercise << []models.Exercise{$0.(models.Exercise)}, nil >>
    | Exercises Exercise << append($0.([]models.Exercise), $1.(models.Exercise)), nil >>
    ;

Entry: 
    Date Exercises << models.NewWorkout($0.(string), $1.([]models.Exercise)) >>
    ;
    
EntryList: 
    Entry << []*models.Workout{$0.(*models.Workout)}, nil >>
    | EntryList Entry << append($0.([]*models.Workout), $1.(*models.Workout)), nil >>
    ;

